$cfg = {
        'driver' => 'Pig',
        'nummachines' => 5,
        'verify_with_pig' => 1,
        'verify_pig_version' => 'old',

        'groups' => [
                {
                'name' => 'Orc',
                'tests' => [
# Test 1: Load (primitive) from PigStorage and store into OrcStorage
# Also tests multiple load stores in same script
                        {
                        'num' => 1,
                        'notmq' => 1,
                        'pig' => q\
register :HIVELIBDIR:/hive-common-:HIVEVERSION:.jar;
register :HIVELIBDIR:/hive-serde-:HIVEVERSION:.jar;
register :HIVELIBDIR:/hive-exec-:HIVEVERSION:-core.jar;
register :HIVELIBDIR:/hive-shims-common-:HIVEVERSION:.jar;
register :HIVELIBDIR:/hive-shims-common-secure-:HIVEVERSION:.jar;
register :HIVELIBDIR:/hive-shims-:HIVESHIMSVERSION:-:HIVEVERSION:.jar;
a = load ':INPATH:/singlefile/studenttab10k' as (name:chararray, age:int, gpa:float);
store a into ':OUTPATH:.intermediate' using OrcStorage();
b = load ':OUTPATH:.intermediate' using OrcStorage();
describe b;
c = filter b by age < 30;
store c into ':OUTPATH:';\,
                        'verify_pig_script' => q\a = load ':INPATH:/singlefile/studenttab10k' as (name:chararray, age:int, gpa:float);
b = filter a by age < 30;
store b into ':OUTPATH:';\,
                        },
# Test 2: Load (complex) from PigStorage and store into OrcStorage
                        {
                        'num' => 2,
                        'notmq' => 1,
                        'pig' => q\
register :HIVELIBDIR:/hive-common-:HIVEVERSION:.jar;
register :HIVELIBDIR:/hive-serde-:HIVEVERSION:.jar;
register :HIVELIBDIR:/hive-exec-:HIVEVERSION:-core.jar;
register :HIVELIBDIR:/hive-shims-common-:HIVEVERSION:.jar;
register :HIVELIBDIR:/hive-shims-common-secure-:HIVEVERSION:.jar;
register :HIVELIBDIR:/hive-shims-:HIVESHIMSVERSION:-:HIVEVERSION:.jar;
a = load ':INPATH:/singlefile/studentcomplextab10k' as (nameagegpamap:map[], nameagegpatuple:tuple(tname:chararray, tage:int, tgpa:float), nameagegpabag:bag{t:tuple(bname:chararray, bage:int, bgpa:float)});
store a into ':OUTPATH:.intermediate' using OrcStorage();
b = load ':OUTPATH:.intermediate' using OrcStorage();
store b into ':OUTPATH:';\,
                        'verify_pig_script' => q\a = load ':INPATH:/singlefile/studentcomplextab10k' as (nameagegpamap:map[], nameagegpatuple:tuple(tname:chararray, tage:int, tgpa:float), nameagegpabag:bag{t:tuple(bname:chararray, bage:int, bgpa:float)});
store a into ':OUTPATH:';\,
                        },
# Test 3: Aggregation test using two ORCStorage datasets
# Also incorporates handling bytearrays
                        {
                        'num' => 3,
                        'notmq' => 1,
                        'pig' => q\register :HIVELIBDIR:/hive-common-:HIVEVERSION:.jar;
register :HIVELIBDIR:/hive-serde-:HIVEVERSION:.jar;
register :HIVELIBDIR:/hive-exec-:HIVEVERSION:-core.jar;
register :HIVELIBDIR:/hive-shims-common-:HIVEVERSION:.jar;
register :HIVELIBDIR:/hive-shims-common-secure-:HIVEVERSION:.jar;
register :HIVELIBDIR:/hive-shims-:HIVESHIMSVERSION:-:HIVEVERSION:.jar;
a = load ':INPATH:/singlefile/studentnulltab10k' as (name:chararray, age:int, gpa:float);
store a into ':OUTPATH:.simple.intermediate' using OrcStorage();
b = load ':INPATH:/singlefile/studentcomplextab10k' as (nameagegpamap:map[], nameagegpatuple:tuple(tname:chararray, tage:int, tgpa:float), nameagegpabag:bag{t:tuple(bname:chararray, bage:int, bgpa:float)}, nameagegpamap_name:chararray, nameagegpamap_age:int, nameagegpamap_gpa:float);
store b into ':OUTPATH:.complex.intermediate' using OrcStorage();
c = load ':OUTPATH:.simple.intermediate' using OrcStorage();
describe c;
d = load ':OUTPATH:.complex.intermediate' using OrcStorage();
describe d;
e = foreach c generate name, age, gpa;
f = foreach d generate nameagegpamap#'name' as name, nameagegpamap#'age' as age, nameagegpamap#'gpa' as gpa, nameagegpatuple.tage as tage, FLATTEN(nameagegpabag) as (bname, bage, bgpa);
g = join e by name, f by name;
h = group g by (f::bgpa);
j = foreach h generate group, COUNT(g) as students;
k = order j by group, students;
store k into ':OUTPATH:';\,
                        'verify_pig_script' => q\a = load ':INPATH:/singlefile/studentnulltab10k' as (name:chararray, age:int, gpa:float);
b = load ':INPATH:/singlefile/studentcomplextab10k' as (nameagegpamap:map[], nameagegpatuple:tuple(tname:chararray, tage:int, tgpa:float), nameagegpabag:bag{t:tuple(bname:chararray, bage:int, bgpa:float)}, nameagegpamap_name:chararray, nameagegpamap_age:int, nameagegpamap_gpa:float);
c = foreach a generate name, age, gpa;
d = foreach b generate nameagegpamap#'name' as name, nameagegpamap#'age' as age, nameagegpamap#'gpa' as gpa, nameagegpatuple.tage as tage, FLATTEN(nameagegpabag) as (bname, bage, bgpa);
e = join c by name, d by name;
f = group e by (d::bgpa);
g = foreach f generate group, COUNT(e) as students;
h = order g by group, students;
store h into ':OUTPATH:';\,
                        },
# Tests 4 : Test various properties passed to ORCStorage
                        {
                        'num' => 4,
                        'notmq' => 1,
                        'pig' => q\
register :HIVELIBDIR:/hive-common-:HIVEVERSION:.jar;
register :HIVELIBDIR:/hive-serde-:HIVEVERSION:.jar;
register :HIVELIBDIR:/hive-exec-:HIVEVERSION:-core.jar;
register :HIVELIBDIR:/hive-shims-common-:HIVEVERSION:.jar;
register :HIVELIBDIR:/hive-shims-common-secure-:HIVEVERSION:.jar;
register :HIVELIBDIR:/hive-shims-:HIVESHIMSVERSION:-:HIVEVERSION:.jar;
a = load ':INPATH:/singlefile/studenttab10k' as (name:chararray, age:int, gpa:float);
store a into ':OUTPATH:.orc_params.intermediate' using OrcStorage('-c ZLIB -s 67108864 -r 100000 -b 1048576 -p true -v 0.12');
b = load ':OUTPATH:.orc_params.intermediate' using OrcStorage();
store b into ':OUTPATH:';\,
                        'verify_pig_script' => q\a = load ':INPATH:/singlefile/studenttab10k' as (name:chararray, age:int, gpa:float);
store a into ':OUTPATH:';\,
                        }
                        ]
                }
        ]
};

